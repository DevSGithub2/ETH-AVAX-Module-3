// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DevSToken is ERC20 {
    // Public variables here
    string public tokenName = "DevSToken";
    string public abbrv = "DST";
    address public owner;

    // Constructor to set the owner and initialize the ERC20 token
    constructor() ERC20(tokenName, abbrv) {
        owner = msg.sender;
    }

    // Modifier to check if the caller is the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Modifier to check if the caller is the token holder
    modifier onlyHolder(address _add) {
        require(msg.sender == _add, "You can only burn your own tokens");
        _;
    }

    // Mint function
    function mint(address _add, uint _val) public onlyOwner {
        _mint(_add, _val);
    }

    // Burn function
    function burn(address _add, uint _val) public onlyHolder(_add) {
        require(balanceOf(_add) >= _val, "Insufficient balance");
        _burn(_add, _val);
    }

    // Transfer function
    function transfer(address _trans, uint _val) public override returns (bool) {
        require(_trans != address(0), "Invalid address");
        require(_val <= balanceOf(msg.sender), "Insufficient balance");
        
        _transfer(msg.sender, _trans, _val);
        return true;
    }
}
